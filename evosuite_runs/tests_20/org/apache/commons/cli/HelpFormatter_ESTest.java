/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 06 02:40:13 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1407);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("\n");
      String string0 = "";
      String string1 = "";
      Option option0 = new Option("", " :: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      options1.toString();
      Options options2 = options0.addOption(option0);
      helpFormatter0.setLeftPadding((-2));
      options1.addOption("", " :: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("ND<>efT M", "", options2, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options0 = new Options();
      Option option0 = new Option("B", "\n");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B");
      options0.toString();
      Options options1 = options0.addOption(option0);
      helpFormatter0.setLeftPadding(7);
      Options options2 = options1.addOption("B", "\n");
      helpFormatter0.printHelp("F,&xMm0j68p'w@%,", "B", options2, "F,&xMm0j68p'w@%,", false);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "", options2);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      helpFormatter0.setOptPrefix((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1735), "N");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options0 = new Options();
      Option option0 = new Option("B", "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B");
      Options options1 = new Options();
      helpFormatter0.setOptPrefix("F,&xMm0j68p'w@%,");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, (-1), 468, "42m,(>}i$l`xZ\u0001iv");
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 3, 3, "F,&xMm0j68p'w@%,");
      Options options2 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer2, (-2018), options2, 74, 631);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      stringWriter0.write(44);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (int) (byte)102, "-");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("\n");
      Options options1 = new Options();
      Options options2 = options1.addOption("", true, "\n");
      helpFormatter0.printHelp("ND<>efT M", "arg", options1, "qx%QzI{-!CN");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "qx%QzI{-!CN";
      objectArray0[4] = (Object) options2;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) helpFormatter0;
      mockPrintWriter0.format(locale0, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2793, "puVmI", "org.apache.commons.cli.HelpFormatter$1", options1, (-458), (-458), "{mVsc]kW|,h", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -458
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("\n");
      options0.addOption("", true, "\n");
      helpFormatter0.printHelp("ND<>efT M", "arg", options0, "-");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.GERMAN;
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2793, "?OSR Gx*|/n/T", "?OSR Gx*|/n/T", options0, (-2), (-2), "puVmI", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options0 = new Options();
      Option option0 = new Option("B", "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options0.toString();
      Options options2 = options0.addOption(option0);
      helpFormatter0.setLeftPadding(7);
      helpFormatter0.printHelp("F,&xMm0j68p'w@%,", options1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      helpFormatter0.printHelp(printWriter0, (-1), "puVmI", "", options0, 3, 7, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printUsage(printWriter0, 3, "puVmI", options2);
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("", "usage: ", false, "d");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3781, options1, 3936, 1);
      helpFormatter0.renderOptions(stringBuffer1, 41, options0, 41, 0);
      Comparator<Option> comparator0 = helpFormatter0.optionComparator;
      helpFormatter0.setOptionComparator(comparator0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "--", "-", options0, 2, 2, "-");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-11), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(bufferedOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 74, "usage: ", "usage: ", (Options) null, 3, 3, "usage: ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      int int0 = 44;
      helpFormatter0.defaultSyntaxPrefix = null;
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLongOptSeparator("-");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 44, 3724);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "\"", "\"", (Options) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.printHelp(">,zGvM$Z+$Q{u", options0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "-";
      mockPrintWriter0.format(locale0, "j|~\",#X", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "g", "j|~\",#X", options0, 3, 3, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2435), 2589, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix((String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("]2L", "k @fm'@^~", options1, "-", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(12);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, (String) null);
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 5, options1, 3036, 1613);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter1.renderWrappedText(stringBuffer1, 3036, 74, "1QEJ.3y");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("hN#^WavDEd&\"9kh");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", "usage: ", options0, 74, (-4375), "usage: ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -4375
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      StringBuffer stringBuffer1 = new StringBuffer("-");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addRequiredOption("usage: ", "4S", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("--");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(bufferedOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      InputStream.nullInputStream();
      pipedOutputStream0.connect(pipedInputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 3, " ", options0);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter1, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter1, 261, "arg", "", options0, 3, 261, "--", false);
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 118, 1, "arg");
      helpFormatter1.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter2.createPadding((-1097));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1097
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options0 = new Options();
      Option option0 = new Option("B", "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B");
      options0.toString();
      Options options1 = options0.addOption(option0);
      helpFormatter0.setLeftPadding(7);
      Options options2 = options1.addOption("B", "\n");
      helpFormatter0.printHelp("F,&xMm0j68p'w@%,", options2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      helpFormatter0.printHelp(printWriter0, (-1), "puVmI", "", options2, 3, 7, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "[ Options: [ short java.util.LinkedHashMap@0000000006 ] [ long {} ]");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 3, "");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, (-4044), 3, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("--");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 1, "", "zWcwy/(Y@UIif|B", options0, 1, 1023, "--", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.setOptPrefix("}yI}T0");
      Options options2 = new Options();
      helpFormatter0.printHelp("}yI}T0", ";OS,Or", options0, (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 812, "}yI}T0", "#:}$yeXl", options0, (-1971), 3, "\"tjoaD.po,,@");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1971
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 32;
      int int1 = 3;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 32, (String) null, "^M", options0, 3, 111, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = 1023;
      Writer writer0 = Writer.nullWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(writer0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('|');
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption((String) null, "Cannot add value, list full.", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, (String) null, "", options1, 61, 0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1, "6j5MpI[u8", "EH'EBN+KKG1Btx)\"#H", options0, 74, 74, "", false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptPrefix();
      int int0 = 1566;
      String string0 = "&:x<.^\\xFIHNXfMcnK";
      String string1 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)67;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        options0.addOption("&:x<.^xFIHNXfMcnK", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '&:x<.^xFIHNXfMcnK' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("--");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(bufferedOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      pipedOutputStream0.connect(pipedInputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 3, " ", options0);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter1, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 118, 1, "arg");
      helpFormatter1.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter2.createPadding((-1097));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1097
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      options0.toString();
      Options options1 = options0.addOption(option0);
      helpFormatter0.setLeftPadding(7);
      Options options2 = options1.addOption("", "\n");
      helpFormatter0.printHelp("F,&xMm0j68p'w@%,", options2);
      helpFormatter0.printHelp("arg", "org.apache.commons.cli.HelpFormatter$1", options0, "--", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(9);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "A5Lq#JIoVTkf");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3036, 5, "N$h<f/YK;MPd`Y");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("f80H[)'yRZH/@m");
      helpFormatter1.renderOptions(stringBuffer0, 3, options0, 3, 1);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter1.printOptions(mockPrintWriter0, 74, options2, 1, 603);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      String string0 = "F,&xMm0j68p'w@%,";
      Options options0 = new Options();
      String string1 = "B";
      Option option0 = new Option("B", "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      helpFormatter0.setLeftPadding((-6083));
      String string2 = "D5]i_]&,Px";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("D5]i_]&,Px", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -6083
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("-");
      helpFormatter1.getOptPrefix();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = (-1093);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("-", 330, (-1093));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      options0.getOption(",pvjP");
      helpFormatter0.printHelp("   ", (String) null, options0, "   ");
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, (-6), (String) null, ":0kPFVkPlbEF;snvf", options0, (-79), 10, "JmJ4&eFvNm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOption("\n");
      helpFormatter1.printHelp("\n", "--", options0, "8MvC`OILL");
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 74, (-1), " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "A5Lq#JIoVTkf");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption((String) null, "usage: ");
      option0.setArgs((-5094));
      helpFormatter0.printHelp((-1), "A5Lq#JIoVTkf", "[", options0, "[&$$3", true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 44, 1440, "[&$$3");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1817, "[", "A5Lq#JIoVTkf", options0, 100, 1440, " ");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options0 = new Options();
      Option option0 = new Option("B", "\n");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f 0\"Vv%\";^@fK8o");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.GERMAN;
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-458), "puVmI", "", options0, 3, (-420), "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      String string0 = "A5Lq#JIoVTkf";
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "A5Lq#JIoVTkf");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption((String) null, "usage: ");
      option0.setArgs((-5094));
      String string1 = "[";
      int int0 = (-47);
      String string2 = "[ARG...]";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-47), "[", "[", options1, (-2), (-2), "[ARG...]", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOption("\n");
      helpFormatter1.printHelp("\n", "   ", options0, "8MvC`OILL");
      helpFormatter1.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "--", " ", options0, 1, 84, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("--");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1023, "\n", "usage: ", options0, 32, 74, (String) null, false);
      Options options1 = options0.addOption("arg", "cI", false, "zWcwy/(Y@UIif|B");
      Options options2 = options1.addRequiredOption("", (String) null, true, "H?IRx");
      helpFormatter1.renderOptions(stringBuffer0, 3, options2, 74, 1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(17);
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("*`[L/23(a%vKe", " ] [ long ", options0, " ] [ long ");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "A5Lq#JIoVTkf");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption((String) null, "usage: ");
      option0.setArgs((-5094));
      helpFormatter0.printHelp(25, "A5Lq#JIoVTkf", "", options0, "[&$$3", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2519), "", "", options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      helpFormatter0.setLongOptSeparator("--");
      helpFormatter0.setOptionComparator((Comparator<Option>) null);
      helpFormatter0.createPadding(1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "emIBm;u`dZ7Ki", options0, ".S4B]U=dDF(q4`i:ABI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 103, 1, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultLeftPad;
      Options options0 = new Options();
      Option option0 = new Option("B", "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B");
      int int1 = 0;
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options0, 101, 259);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      StringBuffer stringBuffer0 = new StringBuffer(2);
      Options options0 = new Options();
      options0.addOption("Q", "usage: ", false, (String) null);
      Options options1 = options0.addRequiredOption("", "-", true, "arg");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 1, 1, "-");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer1, (-14), options1, 74, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      stringBuffer0.ensureCapacity(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 2582, "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 1, 2293, "!");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 63, "arg", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.printHelp("-", "-", options0, ">,zGvM$Z+$Q{u", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("-", (-1027), (-12));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "A5Lq#JIoVTkf");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-44), "[&$$3", "", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "A5Lq#JIoVTkf");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption((String) null, "usage: ");
      option0.setArgs((-5094));
      helpFormatter0.printHelp((-1), "A5Lq#JIoVTkf", "[", options0, "[&$$3", true);
      helpFormatter0.printHelp(74, "[", "", options0, "+h-!]MOn9h+T=;~8e", true);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), 5, "A5Lq#JIoVTkf");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "F,&xMm0j68p'w@%,", "F,&xMm0j68p'w@%,", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      stringBuffer0.ensureCapacity(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3278), (-3278), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.setArgName("");
      stringBuffer0.ensureCapacity(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1072), ", ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1072
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setArgName("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("", 383, 2147483645);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("--");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-588), 3, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(425, "q!;]lP@qPsP{cqE:", "9PJRq=EJYAP", (Options) null, "'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer(" | ");
      char[] charArray0 = new char[9];
      helpFormatter0.getLongOptSeparator();
      charArray0[0] = '<';
      charArray0[1] = '|';
      charArray0[2] = ')';
      charArray0[3] = 'L';
      charArray0[4] = '#';
      charArray0[5] = '!';
      charArray0[6] = 'q';
      charArray0[7] = '#';
      charArray0[8] = 'V';
      stringBuffer0.insert(3, charArray0);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " | ");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      mockFileOutputStream0.release();
      objectArray0[4] = object0;
      mockFileOutputStream0.write(74);
      mockPrintWriter0.println(false);
      Object object1 = new Object();
      objectArray0[5] = object1;
      Object object2 = new Object();
      objectArray0[6] = object2;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.print('i');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, "");
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp(4509, " [ARG]", " [ARG]", options0, "");
      helpFormatter0.getLeftPadding();
      Options options1 = options0.addOption("arg", "usage: ");
      String string0 = "[ARG...]";
      Option option0 = new Option((String) null, " ", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup2);
      Options options3 = options0.addOption(option0);
      helpFormatter0.printHelp("~QVTDu{c&&=ebpX", options3);
      Options options4 = new Options();
      // Undeclared exception!
      try { 
        options2.addOption(" ", false, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("--");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "cI", false, "zWcwy/(Y@UIif|B");
      Options options2 = options1.addRequiredOption("", "-", true, "H?IRx");
      helpFormatter1.renderOptions(stringBuffer0, 3, options2, 74, 1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      options0.addOption((String) null, true, "");
      helpFormatter0.printHelp("qx%QzI{-!CN", "ND<>efT M", options0, (String) null);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2680));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("arg");
      helpFormatter0.printHelp("arg", "usage: ", options0, " ");
      assertEquals("arg", helpFormatter0.getOptPrefix());
      
      String string0 = "ni)gL@x'#2ESJ=\\%h]-";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, (-522), "FP#h@L/pHYH[z\"UM");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -522
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(";n", options0, true);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 4, 1, "");
      Options options1 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "DK 7NjE'[J}IoD~Pt(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "usage: ", (Options) null, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("d\"]YoG", "lb#VPsv|Q[+&g%!VR", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("W", ":OZB2RR@L{", true, "W");
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-418), "9,^M", "21", options1, "W", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options0 = new Options();
      Option option0 = new Option("B", "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.toString();
      Options options2 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding((-292));
      options2.addOption("", "usage: ");
      helpFormatter0.printHelp("jN<66", options0);
      boolean boolean0 = true;
      options2.getMatchingOptions("arg");
      // Undeclared exception!
      helpFormatter1.printHelp(0, "P;2]9A[^9Ny%ddu(0h\"", "[uOk=qz~Z", options0, "arg", true);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("--");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "cI", false, "zWcwy/(Y@UIif|B");
      Options options2 = options1.addRequiredOption("", (String) null, true, "H?IRx");
      helpFormatter1.renderOptions(stringBuffer0, 3, options2, 74, 1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      options0.toString();
      Options options1 = options0.addOption(option0);
      helpFormatter0.setLeftPadding(7);
      Options options2 = options1.addOption("", "\n");
      helpFormatter0.printHelp("F,&xMm0j68p'w@%,", options2);
      boolean boolean0 = true;
      options1.getMatchingOptions(",ea [K");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), ",ea [K", "F,&xMm0j68p'w@%,", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "A5Lq#JIoVTkf");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption((String) null, "usage: ");
      option0.setArgs((-5094));
      helpFormatter0.printHelp((-1), "A5Lq#JIoVTkf", "[", options0, "[&$$3", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2519), "[", "", options0, "+h-!]MOn9h+T=;~8e", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("\n");
      Options options1 = new Options();
      options1.addOption("", true, "\n");
      helpFormatter0.printHelp("ND<>efT M", "arg", options1, "qx%QzI{-!CN");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-2), " i");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      helpFormatter0.printHelp("' was specified but an option from this group has already been selected: '", "--", options0, "--");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("]-9v", options0, true);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("\n");
      Options options1 = new Options();
      String string0 = helpFormatter0.defaultNewLine;
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.ensureCapacity(3);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("m{DT9A");
      Options options1 = options0.addOption("", "arg");
      helpFormatter0.printHelp("--", "m{DT9A", options1, "", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(12);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(";n", options1, false);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options0 = new Options();
      Option option0 = new Option("B", "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B");
      options0.toString();
      Options options2 = options0.addOption(option0);
      helpFormatter0.setLeftPadding(7);
      Options options3 = options2.addOption("B", "\n");
      helpFormatter0.printHelp("F,&xMm0j68p'w@%,", "B", options3, "F,&xMm0j68p'w@%,", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp("[ Options: [ short java.util.LinkedHashMap@0000000006 ] [ long {} ]", "-", options1, "B");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      options0.addOption("arg", "-", false, "");
      helpFormatter0.printHelp(";OS,Or", "arg", options0, "' contains an illegal character : '");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      int int0 = 2858;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", "m!ZYI7_XA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      stringBuffer0.ensureCapacity(74);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 3781;
      Options options0 = new Options();
      int int1 = (-1919);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3781, options0, 0, (-1919));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1919
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer(" | ");
      int int1 = 0;
      int int2 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " | ");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter0.renderWrappedText(stringBuffer0, 61, 61, "");
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("--", false, "]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("K4(s+SM$^]A<E`:Z");
      helpFormatter0.printHelp("K4(s+SM$^]A<E`:Z", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("arg");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp(4509, "ARG]", "ARG]", options0, "");
      helpFormatter0.getLeftPadding();
      options0.addOption("arg", "usage: ");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 4509;
      Options options0 = new Options();
      options0.toString();
      String string0 = "";
      helpFormatter0.printHelp(4509, " [ARG]", " [ARG]", options0, "");
      helpFormatter0.getLeftPadding();
      options0.addOption("arg", "usage: ");
      helpFormatter0.setLongOptSeparator(" [ARG]");
      helpFormatter0.setOptPrefix("-");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(4048);
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOption("GrcK2l\"/1Pv_{+1~hOz");
      helpFormatter0.printHelp(" | ", "usage: ", options0, "-");
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "usage: ", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, (-2), 74, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.setDescPadding(2610);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) null;
      mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter$1", objectArray0);
      int int0 = (-4349);
      String string0 = "NJ7y5^nS5q";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addRequiredOption("\n", "xFo?fML@?uArg[aD!T", false, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B");
      options0.toString();
      helpFormatter0.setLeftPadding(7);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "S%~r2}]q73=f^";
      helpFormatter0.defaultSyntaxPrefix = "S%~r2}]q73=f^";
      helpFormatter0.setWidth(0);
      String string1 = ",QT{q!HjV^FWNAlf4";
      helpFormatter0.defaultSyntaxPrefix = ",QT{q!HjV^FWNAlf4";
      String string2 = "T/BOx_l|L_'%E";
      helpFormatter0.setNewLine("T/BOx_l|L_'%E");
      helpFormatter0.setLeftPadding(0);
      String string3 = ">";
      helpFormatter0.rtrim(">");
      helpFormatter0.getDescPadding();
      int int0 = 0;
      int int1 = 0;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("   ", ",QT{q!HjV^FWNAlf4");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ,QT{q!HjV^FWNAlf4
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options0 = new Options();
      Option option0 = new Option("B", "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.toString();
      options0.addOption(option0);
      helpFormatter0.setLeftPadding(7);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-315), "[ Options: [ short java.util.LinkedHashMap@0000000006 ] [ long {} ]", "B", options0, (-315), 7, "[ Options: [ short java.util.LinkedHashMap@0000000006 ] [ long {} ]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOption("\n");
      helpFormatter1.printHelp("\n", "--", options0, "8MvC`OILL");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "--", " ", options0, 1, 84, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "A5Lq#JIoVTkf");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("q", (String) null);
      Options options4 = options3.addRequiredOption((String) null, "-", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2519), "arg", "A5Lq#JIoVTkf", options4, (-1), (-1), "q");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Comparator<Option> comparator0 = helpFormatter0.optionComparator;
      helpFormatter0.setOptionComparator(comparator0);
      Options options2 = options1.addOption("", "org.apache.commons.cli.HelpFormatter");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator<Option>) null);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("Lmeb/n7{|MYjWc#:c", options0);
      Options options1 = new Options();
      helpFormatter0.printHelp("-", "^M", options1, "-");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("qgIz");
      helpFormatter0.getWidth();
      Comparator<Option> comparator0 = helpFormatter0.optionComparator;
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getDescPadding();
      String string0 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "F,&xMm0j68p'w@%,";
      Options options0 = new Options();
      String string1 = "";
      Option option0 = new Option("", "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "\n");
      helpFormatter0.printHelp("F,&xMm0j68p'w@%,", options2);
      String string2 = ",ea [K";
      options1.getMatchingOptions(",ea [K");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), ",ea [K", "F,&xMm0j68p'w@%,", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-859);
      StringBuffer stringBuffer0 = new StringBuffer(1029);
      helpFormatter0.renderWrappedText(stringBuffer0, 1029, 1029, "7?9^H^>Hq;QI");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Comparator<Option> comparator0 = null;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 0, options1, 2164, (-448));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -448
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("\n", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("'Ok$x");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultOptPrefix = "'Ok$x";
      helpFormatter0.rtrim("w q@w");
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setSyntaxPrefix("-");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(727);
      helpFormatter0.setOptPrefix("arg");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 9;
      helpFormatter0.setWidth(0);
      helpFormatter0.setLongOptPrefix("cmdLineSyntax not provided");
      helpFormatter0.setLongOptSeparator("cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 1, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      stringBuffer0.ensureCapacity(74);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "arg");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1150, "The option '");
      helpFormatter0.setWidth(2169);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2290));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2290
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("V&)xWu!+Z");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("Ug#>$");
      int int0 = 1;
      String string0 = "-)B}:bA$FrVrNa7";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 1, 1, "-)B}:bA$FrVrNa7");
  }
}
