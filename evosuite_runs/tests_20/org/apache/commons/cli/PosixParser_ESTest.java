/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 06 02:42:27 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PosixParser_ESTest extends PosixParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      posixParser0.burstToken("", false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Options options0 = new Options();
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = new String[0];
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      // Undeclared exception!
      try { 
        posixParser0.burstToken(" [ARG]", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.PosixParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[20];
      stringArray0[0] = "-/";
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      assertEquals(20, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Options options0 = new Options();
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "---HeV>F(~,dec";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      String[] stringArray2 = posixParser0.flatten(options0, stringArray1, true);
      assertEquals(3, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = new Options();
      PosixParser posixParser0 = new PosixParser();
      Options options1 = options0.addRequiredOption("Ylf", ".", false, "?");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-.";
      stringArray0[1] = "-";
      // Undeclared exception!
      try { 
        posixParser0.flatten(options1, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("", "---HeV>F(~,dec", true, "---HeV>F(~,dec");
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "---HeV>F(~,dec";
      String[] stringArray1 = posixParser0.flatten(options1, stringArray0, true);
      posixParser0.burstToken("---HeV>F(~,dec", true);
      String[] stringArray2 = posixParser0.flatten(options1, stringArray1, true);
      assertEquals(2, stringArray1.length);
      assertEquals(2, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("", "org.apache.commons.cli.PosixParser");
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-,GAt(JBtJa";
      posixParser0.flatten(options0, stringArray0, true);
      posixParser0.burstToken("--,GAt(JBtJa", true);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Options options0 = new Options();
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".";
      stringArray0[1] = ".";
      stringArray0[2] = ".";
      stringArray0[3] = ".";
      stringArray0[4] = "-.";
      stringArray0[5] = "-.";
      stringArray0[6] = ".";
      stringArray0[7] = ".";
      posixParser0.flatten(options0, stringArray0, false);
      posixParser0.burstToken("Ylf", true);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[20];
      stringArray0[0] = "--F`WF&nX1;=ejyd'&{";
      PosixParser posixParser0 = new PosixParser();
      posixParser0.flatten(options0, stringArray0, true);
      posixParser0.burstToken("--F`WF&nX1;=ejyd'&{", false);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Options options0 = new Options();
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".";
      stringArray0[1] = ".";
      stringArray0[2] = ".";
      stringArray0[3] = ".";
      stringArray0[4] = "-.";
      stringArray0[5] = "-.";
      stringArray0[6] = ".";
      stringArray0[7] = ".";
      Options options1 = options0.addRequiredOption("Ylf", ".", true, "?");
      posixParser0.flatten(options1, stringArray0, false);
      posixParser0.burstToken("-.", true);
  }
}
