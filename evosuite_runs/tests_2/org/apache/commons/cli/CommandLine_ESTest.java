/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 05 23:15:39 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CommandLine_ESTest extends CommandLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CommandLine.Builder commandLine_Builder0 = new CommandLine.Builder();
      Option option0 = new Option("m2C", true, "9} }`W2QH]r]5?tHv#");
      commandLine_Builder0.addOption(option0);
      CommandLine commandLine0 = commandLine_Builder0.build();
      Object object0 = commandLine0.getParsedOptionValue('-');
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CommandLine.Builder commandLine_Builder0 = new CommandLine.Builder();
      Option option0 = new Option("", false, "");
      Option option1 = new Option("", false, "Cannot add value, list full.");
      commandLine_Builder0.addOption(option1);
      CommandLine commandLine0 = commandLine_Builder0.build();
      String string0 = commandLine0.getOptionValue(option0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("S", false, "S");
      option0.setArgs(622);
      commandLine0.addOption(option0);
      option0.addValueForProcessing("S");
      option0.addValueForProcessing("-}.`vvd");
      option0.addValueForProcessing("S");
      Properties properties0 = commandLine0.getOptionProperties("S");
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("S", false, "S");
      option0.setArgs(622);
      commandLine0.addOption(option0);
      option0.addValueForProcessing("-}.`vvd");
      option0.addValueForProcessing("-}.`vvd");
      option0.addValueForProcessing("S");
      Properties properties0 = commandLine0.getOptionProperties(option0);
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option((String) null, false, (String) null);
      Option option1 = new Option((String) null, false, "A");
      commandLine0.addOption(option0);
      Properties properties0 = commandLine0.getOptionProperties(option1);
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("A", true, "A");
      Class<Option> class0 = Option.class;
      option0.setType(class0);
      commandLine0.addOption(option0);
      option0.addValueForProcessing("4");
      Object object0 = commandLine0.getOptionObject("A");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("", "", true, "");
      commandLine0.addOption(option0);
      boolean boolean0 = commandLine0.hasOption("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("A", false, "A");
      commandLine0.addOption(option0);
      boolean boolean0 = commandLine0.hasOption('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("S", "S", true, "S");
      commandLine0.addOption(option0);
      option0.addValueForProcessing("S");
      Object object0 = commandLine0.getParsedOptionValue("S");
      assertEquals("S", object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("S", "S", true, "S");
      commandLine0.addOption(option0);
      option0.addValueForProcessing("S");
      Object object0 = commandLine0.getParsedOptionValue('S');
      assertEquals("S", object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("cVs38N", true, "cVs38N");
      commandLine0.addOption(option0);
      Option[] optionArray0 = commandLine0.getOptions();
      assertEquals(1, optionArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("cVs38N", true, "cVs38N");
      commandLine0.addOption(option0);
      option0.addValueForProcessing("cVs38N");
      String[] stringArray0 = commandLine0.getOptionValues("cVs38N");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("K", "K", true, "K");
      option0.addValueForProcessing("?St='`+X;BTu2M{4");
      commandLine0.addOption(option0);
      String[] stringArray0 = commandLine0.getOptionValues('K');
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CommandLine.Builder commandLine_Builder0 = new CommandLine.Builder();
      CommandLine commandLine0 = commandLine_Builder0.build();
      Option option0 = new Option((String) null, (String) null);
      String string0 = commandLine0.getOptionValue(option0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("S", true, "S");
      commandLine0.addOption(option0);
      option0.addValueForProcessing("");
      String string0 = commandLine0.getOptionValue(option0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      String string0 = commandLine0.getOptionValue("Illegal option name '", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("K", true, "K");
      commandLine0.addOption(option0);
      option0.addValueForProcessing("K");
      String string0 = commandLine0.getOptionValue("K");
      assertEquals("K", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      commandLine0.addOption(option0);
      String string0 = commandLine0.getOptionValue("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CommandLine.Builder commandLine_Builder0 = new CommandLine.Builder();
      CommandLine commandLine0 = commandLine_Builder0.build();
      String string0 = commandLine0.getOptionValue('o', "6-Sp0+E-M`");
      assertNotNull(string0);
      assertEquals("6-Sp0+E-M`", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CommandLine.Builder commandLine_Builder0 = new CommandLine.Builder();
      CommandLine commandLine0 = commandLine_Builder0.build();
      String string0 = commandLine0.getOptionValue('j', "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("K", true, "K");
      commandLine0.addOption(option0);
      option0.addValueForProcessing("K");
      String string0 = commandLine0.getOptionValue('K');
      assertEquals("K", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("", "", true, "");
      commandLine0.addOption(option0);
      option0.addValueForProcessing("");
      String string0 = commandLine0.getOptionValue('-');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("A", "A", true, "A");
      option0.addValueForProcessing("A");
      commandLine0.addOption(option0);
      Object object0 = commandLine0.getOptionObject("A");
      assertEquals("A", object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CommandLine.Builder commandLine_Builder0 = new CommandLine.Builder();
      CommandLine commandLine0 = commandLine_Builder0.build();
      commandLine_Builder0.addArg("");
      String[] stringArray0 = commandLine0.getArgs();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("K", "K", true, "K");
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      commandLine0.addOption(option0);
      option0.addValueForProcessing("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      try { 
        commandLine0.getParsedOptionValue(option0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to find the class: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.TypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("", "", true, "");
      Class<Option> class0 = Option.class;
      option0.setType(class0);
      commandLine0.addOption(option0);
      option0.addValueForProcessing("");
      try { 
        commandLine0.getParsedOptionValue("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to handle the class: class org.apache.commons.cli.Option
         //
         verifyException("org.apache.commons.cli.TypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("A", true, "A");
      commandLine0.addOption(option0);
      option0.addValueForProcessing((String) null);
      // Undeclared exception!
      try { 
        commandLine0.getOptionProperties(option0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option((String) null, (String) null);
      commandLine0.addOption(option0);
      // Undeclared exception!
      try { 
        commandLine0.getOptionProperties((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", false, "");
      CommandLine commandLine0 = new CommandLine();
      boolean boolean0 = commandLine0.hasOption(option0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("S", true, "S");
      commandLine0.addOption(option0);
      option0.addValueForProcessing("S");
      Object object0 = commandLine0.getParsedOptionValue(option0);
      assertEquals("S", object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Object object0 = commandLine0.getParsedOptionValue((Option) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("H2", true, " to desired type: ");
      commandLine0.addOption(option0);
      option0.addValueForProcessing((String) null);
      String[] stringArray0 = commandLine0.getOptionValues(option0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("A", false, "A");
      Option option1 = new Option("A", "@c8;D%", false, "@c8;D%");
      commandLine0.addOption(option1);
      String[] stringArray0 = commandLine0.getOptionValues(option0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CommandLine.Builder commandLine_Builder0 = new CommandLine.Builder();
      Option option0 = new Option("", true, "DCx1-1J");
      CommandLine commandLine0 = commandLine_Builder0.build();
      String string0 = commandLine0.getOptionValue(option0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("S", true, "S");
      commandLine0.addOption(option0);
      option0.addValueForProcessing("S");
      String string0 = commandLine0.getOptionValue(option0, "S");
      assertEquals("S", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      String string0 = commandLine0.getOptionValue((Option) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      boolean boolean0 = commandLine0.hasOption("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Object object0 = commandLine0.getParsedOptionValue("a4GFFMf_Y$NM$Q7eg ");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("true", "k", true, "true");
      commandLine0.addOption(option0);
      String string0 = commandLine0.getOptionValue("k", "k");
      assertEquals("k", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      String string0 = commandLine0.getOptionValue((String) null, "m");
      assertEquals("m", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("K", "K", true, "K");
      commandLine0.addOption(option0);
      boolean boolean0 = commandLine0.hasOption(option0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("S", "S", true, "S");
      commandLine0.addOption(option0);
      option0.addValueForProcessing("S");
      Object object0 = commandLine0.getOptionObject('S');
      assertEquals("S", object0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option((String) null, false, (String) null);
      Object object0 = commandLine0.getParsedOptionValue(option0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("K", "K", true, "K");
      commandLine0.addOption(option0);
      String[] stringArray0 = commandLine0.getOptionValues("I");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("", "", true, "");
      commandLine0.addOption(option0);
      option0.addValueForProcessing("");
      String string0 = commandLine0.getOptionValue("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("K", "K", true, "K");
      option0.addValueForProcessing("?St='`+X;BTu2M{4");
      commandLine0.addOption(option0);
      String string0 = commandLine0.getOptionValue(option0);
      assertEquals("?St='`+X;BTu2M{4", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      commandLine0.addOption(option0);
      Properties properties0 = commandLine0.getOptionProperties("");
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("S", false, "S");
      option0.setArgs(622);
      commandLine0.addOption(option0);
      option0.addValueForProcessing("S");
      option0.addValueForProcessing("-}.`vvd");
      Properties properties0 = commandLine0.getOptionProperties("S");
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("K", "Y", true, "Y");
      commandLine0.addOption(option0);
      Properties properties0 = commandLine0.getOptionProperties("Y");
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("K", "K", true, "K");
      commandLine0.addOption(option0);
      Properties properties0 = commandLine0.getOptionProperties("I");
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("S", false, "S");
      option0.setArgs(622);
      commandLine0.addOption(option0);
      option0.addValueForProcessing("S");
      option0.addValueForProcessing("-}.`vvd");
      Properties properties0 = commandLine0.getOptionProperties(option0);
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("A", "A", true, "A");
      commandLine0.addOption(option0);
      Properties properties0 = commandLine0.getOptionProperties((Option) null);
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CommandLine.Builder commandLine_Builder0 = new CommandLine.Builder();
      CommandLine.Builder commandLine_Builder1 = commandLine_Builder0.addOption((Option) null);
      assertSame(commandLine_Builder0, commandLine_Builder1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      commandLine0.addArg((String) null);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CommandLine.Builder commandLine_Builder0 = new CommandLine.Builder();
      CommandLine commandLine0 = commandLine_Builder0.build();
      commandLine_Builder0.addArg("");
      List<String> list0 = commandLine0.getArgList();
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      String[] stringArray0 = commandLine0.getArgs();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      String string0 = commandLine0.getOptionValue('K');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      String[] stringArray0 = commandLine0.getOptionValues('K');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option[] optionArray0 = commandLine0.getOptions();
      assertEquals(0, optionArray0.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Object object0 = commandLine0.getOptionObject('K');
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      String string0 = commandLine0.getOptionValue('1', (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      List<String> list0 = commandLine0.getArgList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Iterator<Option> iterator0 = commandLine0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      boolean boolean0 = commandLine0.hasOption('\\');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      String string0 = commandLine0.getOptionValue("");
      assertNull(string0);
  }
}
