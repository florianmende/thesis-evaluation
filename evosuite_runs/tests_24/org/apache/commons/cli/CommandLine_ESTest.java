/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 06 00:23:33 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CommandLine_ESTest extends CommandLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("D", "c9O", true, "c9O");
      commandLine0.addOption(option0);
      Object object0 = commandLine0.getParsedOptionValue('-');
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("", true, "");
      commandLine0.addOption(option0);
      Option option1 = new Option("", "*AKKfGXA/");
      commandLine0.addOption(option1);
      String[] stringArray0 = commandLine0.getOptionValues("");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs((-2));
      option0.addValueForProcessing("");
      option0.addValueForProcessing("");
      option0.addValueForProcessing("");
      CommandLine commandLine0 = new CommandLine();
      commandLine0.addOption(option0);
      Properties properties0 = commandLine0.getOptionProperties("");
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("D", "D");
      option0.setArgs(42);
      option0.addValueForProcessing("O|+Rr4z~@kMV|`T");
      option0.addValueForProcessing("MvxD+|svK>C");
      option0.addValueForProcessing("~[p]<kVAjS8");
      CommandLine.Builder commandLine_Builder0 = new CommandLine.Builder();
      CommandLine commandLine0 = commandLine_Builder0.build();
      commandLine0.addOption(option0);
      Properties properties0 = commandLine0.getOptionProperties(option0);
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("", true, "");
      Option option1 = new Option("", "*AKKfGXA/");
      commandLine0.addOption(option1);
      Properties properties0 = commandLine0.getOptionProperties(option0);
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("D", "D", true, "D");
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      CommandLine commandLine0 = new CommandLine();
      option0.addValueForProcessing("D");
      commandLine0.addOption(option0);
      Object object0 = commandLine0.getOptionObject("D");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("", " to desired type: ", true, "c9O");
      commandLine0.addOption(option0);
      boolean boolean0 = commandLine0.hasOption(" to desired type: ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("F", "D", false, (String) null);
      commandLine0.addOption(option0);
      boolean boolean0 = commandLine0.hasOption('F');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("L", "L", true, "L");
      option0.addValueForProcessing("L");
      commandLine0.addOption(option0);
      Object object0 = commandLine0.getParsedOptionValue("L");
      assertEquals("L", object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("A", "A", true, "A");
      option0.addValueForProcessing("A");
      commandLine0.addOption(option0);
      Object object0 = commandLine0.getParsedOptionValue('A');
      assertEquals("A", object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("A", "A", true, "A");
      commandLine0.addOption(option0);
      Option[] optionArray0 = commandLine0.getOptions();
      assertEquals(1, optionArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("", " to desired type: ", true, "c9O");
      option0.addValueForProcessing("ay)a:iS");
      commandLine0.addOption(option0);
      String[] stringArray0 = commandLine0.getOptionValues("");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("D", "org.apache.commons.cli.Option", true, "org.apache.commons.cli.Option");
      option0.addValueForProcessing("m2u1tF$r490]e TS");
      commandLine0.addOption(option0);
      String[] stringArray0 = commandLine0.getOptionValues('D');
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      String string0 = commandLine0.getOptionValue((Option) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option((String) null, "", false, "");
      String string0 = commandLine0.getOptionValue(option0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option((String) null, true, "<M[qHTs@uA^=.(7");
      option0.addValueForProcessing("");
      commandLine0.addOption(option0);
      String string0 = commandLine0.getOptionValue(option0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CommandLine.Builder commandLine_Builder0 = new CommandLine.Builder();
      CommandLine commandLine0 = commandLine_Builder0.build();
      String string0 = commandLine0.getOptionValue((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      String string0 = commandLine0.getOptionValue("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("A", "A", true, "A");
      option0.addValueForProcessing("A");
      commandLine0.addOption(option0);
      String string0 = commandLine0.getOptionValue("A");
      assertEquals("A", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("", "D", true, (String) null);
      option0.addValueForProcessing("");
      commandLine0.addOption(option0);
      String string0 = commandLine0.getOptionValue("D");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      String string0 = commandLine0.getOptionValue('n', (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      String string0 = commandLine0.getOptionValue('t', "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("A", "A", true, "A");
      option0.addValueForProcessing("A");
      commandLine0.addOption(option0);
      String string0 = commandLine0.getOptionValue('A');
      assertEquals("A", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      CommandLine commandLine0 = new CommandLine();
      option0.addValueForProcessing("");
      commandLine0.addOption(option0);
      String string0 = commandLine0.getOptionValue('-');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("", " to desired type: ", true, "c9O");
      option0.addValueForProcessing("ay)a:iS");
      commandLine0.addOption(option0);
      Object object0 = commandLine0.getOptionObject("");
      assertEquals("ay)a:iS", object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CommandLine.Builder commandLine_Builder0 = new CommandLine.Builder();
      CommandLine commandLine0 = commandLine_Builder0.build();
      commandLine0.addArg("");
      String[] stringArray0 = commandLine0.getArgs();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CommandLine.Builder commandLine_Builder0 = new CommandLine.Builder();
      CommandLine commandLine0 = commandLine_Builder0.build();
      commandLine_Builder0.addArg("");
      List<String> list0 = commandLine0.getArgList();
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("", "", true, "");
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      option0.addValueForProcessing("");
      commandLine0.addOption(option0);
      try { 
        commandLine0.getParsedOptionValue(option0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to find the class: 
         //
         verifyException("org.apache.commons.cli.TypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option((String) null, "F");
      option0.setArgs((-2));
      option0.addValueForProcessing((String) null);
      commandLine0.addOption(option0);
      // Undeclared exception!
      try { 
        commandLine0.getOptionProperties(option0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option((String) null, (String) null);
      commandLine0.addOption(option0);
      // Undeclared exception!
      try { 
        commandLine0.getOptionProperties((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("bz", "");
      boolean boolean0 = commandLine0.hasOption(option0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      commandLine0.addOption(option0);
      Object object0 = commandLine0.getParsedOptionValue(option0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Object object0 = commandLine0.getParsedOptionValue((Option) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("", " to desired type: ", true, "c9O");
      option0.addValueForProcessing("ay)a:iS");
      commandLine0.addOption(option0);
      String[] stringArray0 = commandLine0.getOptionValues(option0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option((String) null, "g)O8al=U_9922`tg`F");
      Option option1 = new Option("", "g)O8al=U_9922`tg`F", false, "Exception found converting ");
      commandLine0.addOption(option0);
      String[] stringArray0 = commandLine0.getOptionValues(option1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("", true, "");
      String string0 = commandLine0.getOptionValue(option0, "gGi2ZMh)3\tXf");
      assertEquals("gGi2ZMh)3\tXf", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("", " to desired type: ", true, "c9O");
      option0.addValueForProcessing("ay)a:iS");
      commandLine0.addOption(option0);
      String string0 = commandLine0.getOptionValue(option0);
      assertEquals("ay)a:iS", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("", " to desired type: ", true, "c9O");
      String string0 = commandLine0.getOptionValue(option0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      String string0 = commandLine0.getOptionValue("", " to desired type: ");
      assertNotNull(string0);
      assertEquals(" to desired type: ", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      boolean boolean0 = commandLine0.hasOption("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Object object0 = commandLine0.getParsedOptionValue("L");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("", "D", true, (String) null);
      commandLine0.addOption(option0);
      String string0 = commandLine0.getOptionValue("D");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("D", "D");
      CommandLine commandLine0 = new CommandLine();
      commandLine0.addOption(option0);
      boolean boolean0 = commandLine0.hasOption(option0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("D", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Option option1 = new Option("v", "D");
      commandLine0.addOption(option0);
      Object object0 = commandLine0.getParsedOptionValue(option1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("A", "A", true, "A");
      option0.addValueForProcessing("A");
      commandLine0.addOption(option0);
      String string0 = commandLine0.getOptionValue(option0, "A");
      assertEquals("A", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("D", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      option0.addValueForProcessing("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      commandLine0.addOption(option0);
      Object object0 = commandLine0.getOptionObject('D');
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", object0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("D", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      commandLine0.addOption(option0);
      Object object0 = commandLine0.getOptionObject('D');
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("D", "org.apache.commons.cli.Option", true, "org.apache.commons.cli.Option");
      option0.addValueForProcessing("m2u1tF$r490]e TS");
      commandLine0.addOption(option0);
      Properties properties0 = commandLine0.getOptionProperties("D");
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("D", "D");
      option0.setArgs(42);
      option0.addValueForProcessing("O|+Rr4z~@kMV|`T");
      option0.addValueForProcessing("D");
      CommandLine commandLine0 = new CommandLine();
      commandLine0.addOption(option0);
      Properties properties0 = commandLine0.getOptionProperties("D");
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("", "D", true, (String) null);
      commandLine0.addOption(option0);
      Properties properties0 = commandLine0.getOptionProperties("D");
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("D", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      commandLine0.addOption(option0);
      Properties properties0 = commandLine0.getOptionProperties("Unable to parse the URL: ");
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs((-2));
      option0.addValueForProcessing("");
      option0.addValueForProcessing("");
      CommandLine commandLine0 = new CommandLine();
      commandLine0.addOption(option0);
      Properties properties0 = commandLine0.getOptionProperties(option0);
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option option0 = new Option("t", "t");
      commandLine0.addOption(option0);
      Option option1 = new Option("t", "t", false, "t");
      Properties properties0 = commandLine0.getOptionProperties(option1);
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CommandLine.Builder commandLine_Builder0 = new CommandLine.Builder();
      CommandLine.Builder commandLine_Builder1 = commandLine_Builder0.addOption((Option) null);
      assertSame(commandLine_Builder1, commandLine_Builder0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CommandLine.Builder commandLine_Builder0 = new CommandLine.Builder();
      CommandLine.Builder commandLine_Builder1 = commandLine_Builder0.addArg((String) null);
      assertSame(commandLine_Builder1, commandLine_Builder0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CommandLine.Builder commandLine_Builder0 = new CommandLine.Builder();
      CommandLine commandLine0 = commandLine_Builder0.build();
      String string0 = commandLine0.getOptionValue((Option) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      String[] stringArray0 = commandLine0.getArgs();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      String string0 = commandLine0.getOptionValue('-');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Option[] optionArray0 = commandLine0.getOptions();
      assertEquals(0, optionArray0.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      String[] stringArray0 = commandLine0.getOptionValues('D');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      String string0 = commandLine0.getOptionValue('U', "9,");
      assertNotNull(string0);
      assertEquals("9,", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      List<String> list0 = commandLine0.getArgList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      Iterator<Option> iterator0 = commandLine0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CommandLine commandLine0 = new CommandLine();
      boolean boolean0 = commandLine0.hasOption('F');
      assertFalse(boolean0);
  }
}
