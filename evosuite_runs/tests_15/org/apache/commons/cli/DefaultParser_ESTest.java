/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 06 00:59:14 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Properties;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DefaultParser_ESTest extends DefaultParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser(false);
      Options options0 = new Options();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "(C|>YSR|Mui(V[m0_CM";
      stringArray0[1] = "(C|>YSR|Mui(V[m0_CM";
      stringArray0[2] = "KeHYkv";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "(C|>YSR|Mui(V[m0_CM";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      defaultParser0.parse(options0, stringArray0, properties0, false);
      defaultParser0.handleConcatenatedOptions("NFklwSVH_W;uY#");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser(false);
      defaultParser0.handleConcatenatedOptions("");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("", "", false, "");
      DefaultParser defaultParser0 = new DefaultParser(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "--=";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --=
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-\"+";
      DefaultParser defaultParser0 = new DefaultParser(false);
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -\"+
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("P2", "P2", false, "P2");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--=";
      options0.addRequiredOption("P2", "--=", false, "P2");
      try { 
        defaultParser0.parse(options1, stringArray0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '--'  (could be: 'P2', '--=')
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      Properties properties0 = new Properties();
      properties0.put(defaultParser0, options0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, properties0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.apache.commons.cli.DefaultParser cannot be cast to class java.lang.String (org.apache.commons.cli.DefaultParser is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @17986797; java.lang.String is in module java.base of loader 'bootstrap')
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("P2", "P2", false, "P2");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--=";
      options0.addRequiredOption("P2", "--=", false, "P2");
      Properties properties0 = new Properties();
      try { 
        defaultParser0.parse(options1, stringArray0, properties0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '--'  (could be: 'P2', '--=')
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Options options0 = new Options();
      Properties properties0 = new Properties();
      properties0.setProperty("-\"+", "-\"+");
      DefaultParser defaultParser0 = new DefaultParser();
      try { 
        defaultParser0.parse(options0, (String[]) null, properties0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Default option wasn't defined
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[0];
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      Properties properties0 = new Properties();
      properties0.put(commandLine0, options0);
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.apache.commons.cli.CommandLine cannot be cast to class java.lang.String (org.apache.commons.cli.CommandLine is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @17986797; java.lang.String is in module java.base of loader 'bootstrap')
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addRequiredOption("P2", "P2", false, "P2");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--=";
      Options options1 = options0.addRequiredOption("P2", "--=", false, "P2");
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '--'  (could be: 'P2', '--=')
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
      try { 
        defaultParser0.handleConcatenatedOptions("vXvd1V0$X(e>!d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultParser.Builder defaultParser_Builder0 = DefaultParser.builder();
      DefaultParser defaultParser0 = defaultParser_Builder0.build();
      OptionGroup optionGroup0 = new OptionGroup();
      List<OptionGroup> list0 = List.of(optionGroup0, optionGroup0, optionGroup0);
      defaultParser0.expectedOpts = list0;
      try { 
        defaultParser0.checkRequiredOptions();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing required options: [], [], []
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
      try { 
        defaultParser0.checkRequiredOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Options options0 = new Options();
      Properties properties0 = new Properties();
      DefaultParser defaultParser0 = new DefaultParser(false);
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null, properties0, false);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      Properties properties0 = new Properties();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("U", "U");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0, properties0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("Bk", true, "=");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.addRequiredOption("Bk", "=", true, "Bk");
      String[] stringArray0 = new String[2];
      optionGroup0.setRequired(true);
      stringArray0[0] = "--=";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addRequiredOption("", "", true, "=");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Bk";
      stringArray0[1] = "--=";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("Bk", "Bk", true, "Bk");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "--Bk";
      DefaultParser.Builder defaultParser_Builder0 = DefaultParser.builder();
      Boolean boolean0 = Boolean.valueOf(true);
      DefaultParser.Builder defaultParser_Builder1 = defaultParser_Builder0.setStripLeadingAndTrailingQuotes(boolean0);
      DefaultParser defaultParser0 = defaultParser_Builder1.build();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("Bk", "Bk", true, "Bk");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "--Bk";
      DefaultParser.Builder defaultParser_Builder0 = DefaultParser.builder();
      Boolean boolean0 = Boolean.valueOf("--Bk");
      DefaultParser.Builder defaultParser_Builder1 = defaultParser_Builder0.setStripLeadingAndTrailingQuotes(boolean0);
      DefaultParser defaultParser0 = defaultParser_Builder1.build();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Options options0 = new Options();
      options0.addRequiredOption("P2", "P2", true, "P2");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--=";
      DefaultParser.Builder defaultParser_Builder0 = DefaultParser.builder();
      Boolean boolean0 = Boolean.valueOf(true);
      DefaultParser.Builder defaultParser_Builder1 = defaultParser_Builder0.setStripLeadingAndTrailingQuotes(boolean0);
      DefaultParser defaultParser0 = defaultParser_Builder1.build();
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultParser.Builder defaultParser_Builder0 = DefaultParser.builder();
      Boolean boolean0 = Boolean.valueOf(false);
      DefaultParser.Builder defaultParser_Builder1 = defaultParser_Builder0.setStripLeadingAndTrailingQuotes(boolean0);
      DefaultParser defaultParser0 = defaultParser_Builder1.build();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "#}V]EVtN", true, "");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "#}V]EVtN";
      stringArray0[1] = "~%w";
      stringArray0[2] = "#}V]EVtN";
      stringArray0[3] = ">bDNC,";
      stringArray0[4] = "";
      defaultParser0.parse(options1, stringArray0);
      defaultParser0.handleConcatenatedOptions("---!gUgv6[,+");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("Bk", "Bk", true, "Bk");
      DefaultParser defaultParser0 = new DefaultParser(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Bk";
      stringArray0[1] = "--Bk";
      stringArray0[2] = "--Av=";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Options options0 = new Options();
      options0.addRequiredOption("Bk", "Bk", true, "Bk");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "--Bk";
      stringArray0[1] = "-";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-";
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultParser.Builder defaultParser_Builder0 = DefaultParser.builder();
      DefaultParser defaultParser0 = defaultParser_Builder0.build();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "S,dl+yd'K.7";
      stringArray0[1] = "JS*+Y";
      stringArray0[2] = "--";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0, false);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[10];
      stringArray0[0] = "-==";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -==
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-v=";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultParser.Builder defaultParser_Builder0 = DefaultParser.builder();
      DefaultParser defaultParser0 = defaultParser_Builder0.build();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",%]HQD";
      stringArray0[1] = "-\"";
      try { 
        defaultParser0.parse(options0, stringArray0, properties0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -\"
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("Bk", "Bk", false, "Bk");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Bk";
      stringArray0[1] = "1";
      stringArray0[2] = "1";
      stringArray0[3] = "1";
      stringArray0[4] = "Bk";
      stringArray0[5] = "-Bk";
      stringArray0[6] = "Bk";
      stringArray0[7] = "1";
      stringArray0[8] = "Bk";
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0, properties0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Options options0 = new Options();
      options0.addRequiredOption("Bk", "Bk", true, "Bk");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[16];
      stringArray0[0] = "--B";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultParser.Builder defaultParser_Builder0 = DefaultParser.builder();
      DefaultParser defaultParser0 = defaultParser_Builder0.build();
      Options options0 = new Options();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ">bDNC,";
      stringArray0[1] = "";
      stringArray0[2] = "~%w";
      stringArray0[3] = "---!gUgv6[,+";
      try { 
        defaultParser0.parse(options0, stringArray0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: ---!gUgv6[,+
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addRequiredOption("P2", "P2", true, "P2");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "--=";
      options0.addRequiredOption("P2", "--=", true, "P2");
      Properties properties0 = new Properties();
      try { 
        defaultParser0.parse(options0, stringArray0, properties0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '--'  (could be: 'P2', '--=')
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultParser.Builder defaultParser_Builder0 = DefaultParser.builder();
      DefaultParser defaultParser0 = defaultParser_Builder0.build();
      Options options0 = new Options();
      options0.addOption("", "", false, "");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "Ya";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      defaultParser0.parse(options0, stringArray0);
      try { 
        defaultParser0.handleConcatenatedOptions("--P2");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --P2
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultParser.Builder defaultParser_Builder0 = DefaultParser.builder();
      DefaultParser defaultParser0 = defaultParser_Builder0.build();
      Options options0 = new Options();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-!gUlD5#mSv6a,{+";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -!gUlD5#mSv6a,{+
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-!gUgv6[,+";
      DefaultParser defaultParser0 = new DefaultParser();
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addRequiredOption("Bk", "Bk", false, "Bk");
      options0.addOption("Bk", "Bk", true, (String) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "--Bk";
      stringArray0[1] = "Bk";
      stringArray0[2] = "Bk";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing required option: Bk
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultParser.Builder defaultParser_Builder0 = DefaultParser.builder();
      DefaultParser.Builder defaultParser_Builder1 = defaultParser_Builder0.setAllowPartialMatching(false);
      assertSame(defaultParser_Builder0, defaultParser_Builder1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("Bk", "Bk", true, "Bk");
      DefaultParser defaultParser0 = new DefaultParser(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "--Bk";
      stringArray0[1] = "Bk";
      stringArray0[2] = "--Bk";
      stringArray0[3] = "----Bk";
      stringArray0[4] = "Bk";
      stringArray0[5] = "Bk";
      stringArray0[6] = "--Bk";
      stringArray0[7] = "--Bk";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: Bk
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser(false);
      Options options0 = new Options();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[>9wo";
      stringArray0[1] = "OEh64H*!RS";
      stringArray0[2] = "6}%T:0sUzF_1<](&";
      stringArray0[3] = "Unrecognized option: ";
      stringArray0[4] = "";
      defaultParser0.parse(options0, stringArray0);
      defaultParser0.checkRequiredOptions();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultParser.Builder defaultParser_Builder0 = DefaultParser.builder();
      DefaultParser defaultParser0 = defaultParser_Builder0.build();
      defaultParser0.handleConcatenatedOptions(")");
  }
}
